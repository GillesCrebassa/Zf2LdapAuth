<?php

/** DO NOT EDIT THIS FILE DIRECTLY.  
 * Move it to /config/autoload/ldap.config.php
 * 
 * Also PLEASE make sure to move passwords and secure details to your
 * local.php that is not tracked in a git repository.  The file is left as is
 * in order to show a full list of options for the module.
 * 
 */

return array(
    'ldap_config' => array(
        /** Directory where log files for LDAP login should be stored */
        'log_dir' => 'data/logs',
        /** if $_SERVER['HTTP_REFERRER'] is set then the user will be transfered
         * to the referrer location, if it is not set the user will transfer
         * to the default_location on successful authentication */
        'default_location' => "/",
        /** Would you like to use the callback function? */
        'use_callback_function' => false,
        /* If the use_callback_function is set to true then the module will do an 
         * additional lookup of the user in LDAP to get their ldap details.
         * The returned ldap details will then be pushed to the callback_class.
         * 
         * Your callback_class must have a static function called setData($data)
         * There are no other requirements besides the setData function name and
         * the requirement of it being a static function.  What you do to the data
         * that is returned is up to you.  An example  function to print out data
         * looks like the following (note the exit()) function which prevents the
         * application from doing any further transactions including redirects...
         * yes I'm lazy and don't feel like writing a lot of code to log it :P
         * <?php
          namespace Application\Model;
          class SessionData {
          public static function setData($data){
          echo '<pre>'.var_export($data,true).'</pre>';
          exit();
          }
          }
          ?>
         */
        'callback_class' => '',
        /** You can add multiple servers here just increment the number 
         * and it will do automatic failover as per the Zend LDAP setup.
         */
        'server1' => array(
            'host' => '',
            'accountDomainNameShort' => '',
            'accountCanonicalForm' => '',
            'username' => '',
            'password' => '',
            'baseDn' => '',
            'bindRequiresDn' => TRUE,
            'useSsl' => TRUE,
            'port' => 636,
            'accountFilterFormat' => '(&(uid=%s))',
            'tryUsernameSplit' => TRUE,
        ),
    ),
);